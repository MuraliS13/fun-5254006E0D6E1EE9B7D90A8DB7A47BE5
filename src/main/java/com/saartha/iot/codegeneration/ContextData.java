package com.saartha.iot.codegeneration;  import java.lang.reflect.Field; import java.util.HashSet; import java.util.Set;  import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Configuration;  import com.google.gson.Gson; import com.saartha.iot.common.IRuleConfigurationData; import com.saartha.iot.common.RuleDataPointInfo;  import lombok.Getter; import lombok.Setter;  @Configuration @ConfigurationProperties @Getter public class ContextData implements IRuleConfigurationData {  @Setter private String assetId = "";  @Setter private String sensorReadMethod = "";  @Setter private String triggeredBasedOn = "";  private String dpKpiMappings = null;  @Setter private String exitInterval = "PT5M";  @Setter private Set<RuleDataPointInfo> dataPoints = new HashSet<>();  @Setter private String  par_MODEL = "";  @Setter private String  par_MANUFACTURER = "";  @Setter private double par_Z_TEMPERATURE_NUM = 0;  @Setter private double par_Z_HUMIDITY_NUM = 0;  public void setDpKpiMappings(String dpKpiMappings) {  if (dpKpiMappings != null) {  Gson gson = new Gson();  RuleDataPointInfo[] dataPointMappings =  gson.fromJson(dpKpiMappings, RuleDataPointInfo[].class);  if (dataPointMappings != null && dataPointMappings.length > 0) {  for (int i = 0; i < dataPointMappings.length; i++) {  this.dataPoints.add(dataPointMappings[i]); } }  this.dpKpiMappings = null; } }  @Override public void updateDeviceDPKPIData(String datapoint, String device, String value) throws IllegalArgumentException, IllegalAccessException { String parameterName = null; for (RuleDataPointInfo ruleDataPointInfo : dataPoints) {  if (ruleDataPointInfo.getDeviceName().equals(device) && ruleDataPointInfo.getDataPointName().equals(datapoint)) { parameterName = ruleDataPointInfo.getParameterName(); break;  } }  if (parameterName != null) {  for (Field field : ContextData.class.getDeclaredFields()) {  if (field.getName().equals(parameterName)) { field.set(this, getValue(value, field.getName(), field.getType())); }  } } else { throw new IllegalArgumentException("Missing Parameter Mapping configuration value for dataPoint: " + datapoint + " and Device : " + device); } }  private Object getValue(String value, String name, Class<?> type) {   if (value == null) { throw new IllegalArgumentException("Missing configuration value: " + name); }  if (type == String.class) { return value; } if (type == long.class) { return Long.parseLong(value); } if (type == double.class) { return Double.parseDouble(value); } if (type == boolean.class) { return Boolean.parseBoolean(value); } if (type == int.class) { return Integer.parseInt(value); } if (type == float.class) {   return Float.parseFloat(value); } throw new IllegalArgumentException("Unknown configuration value type: " + type.getName());  }  @Override public String getParameterValue(String fieldName)throws IllegalArgumentException, IllegalAccessException { for (Field field : ContextData.class.getDeclaredFields()) { if (field.getName().equals(fieldName)) { field.setAccessible(true); return field.get(this).toString(); } } return ""; } }